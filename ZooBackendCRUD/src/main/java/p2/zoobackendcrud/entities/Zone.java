/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package p2.zoobackendcrud.entities;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.io.Serializable;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import lombok.Data;

/**
 *
 * @author Agust√≠n Pacheco
 */
@Entity
@Data
@Table(name = "zones")
public class Zone implements Serializable{
    
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "id_zone", nullable = false)
    private Integer id;
    
    @Column(name = "name", nullable = false, length = 20)
    private String name;
    
    @Column(name = "extension", nullable = false)
    private Double extension;
    
    @ManyToMany(mappedBy = "coveredZones", cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch = FetchType.LAZY)
    @JsonIgnore
    Set<Itinerary> coveredItineraries;
    
    @OneToMany(mappedBy = "zone", cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch = FetchType.LAZY)
    @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
    Set<Species> species;
    
    //null safe contructor
    public Zone(){
        coveredItineraries = new HashSet<>();
        species = new HashSet<>();
    }
    
    //All but id (autogenerated by db)
    public Zone(String name, Double extension) {
        this.name = name;
        this.extension = extension;
        coveredItineraries = new HashSet<>();
        species = new HashSet<>();
    }
    
    public void setCoveredItineraries(Collection<Itinerary> itineraries){
        if (itineraries == null) return;
        for (var i : itineraries.toArray()){
            System.out.println(i);
            coveredItineraries.add((Itinerary) i);
        }
    }
    
    public void addItinerary(Itinerary i){
        if (i == null) return;
        coveredItineraries.add(i);
        if(!(i.getCoveredZones().contains(this))) i.addZone(this);
    }
    
    public void removeItinerary(Itinerary i){
        if (i == null) return;
        if (coveredItineraries.contains(i)) {
            coveredItineraries.remove(i);
            if (i.getCoveredZones().contains(this)) i.removeZone(this);
        }
    }
    
    public void removeAllItineraries(){
        List<Itinerary> its = coveredItineraries.stream().toList();
        for (Itinerary it : its) {
            coveredItineraries.remove(it);
            it.removeZone(this);
        }
    }
    
    public void addSpecies(Species s){
        if (s == null) return;
        species.add(s);
        if (s.getZone() != this) s.setZone(this);
    }
    
    public void removeSpecies(Species s){
        if (s == null) return;
        species.remove(s);
        s.setZone(null);
    }
    
    public void removeAllSpecies(){
        Set<Species> sps = new HashSet<>(species); 
        for (Species sp : sps) {
            sp.setZone(null);
        }
    }
    
    @Override
    public String toString(){
        String s = "Zone id: " + id + ", name: " + name + ", Zone Extension: " + extension + " m2. ";
        if (!coveredItineraries.isEmpty()) {
            s += "This zone is covered by the following itineraries:";
            for (Itinerary i : coveredItineraries) {
                s += "\n\tItinerary Code:" + i.getCode() + " (id:" + i.getId() + ")";
            }
        }
        else{
            s += "This zone has no itinerary that covers it.";
        }
        return s;
    }
    
    @Override
    public int hashCode(){
        return Objects.hash(this.id, this.name);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)    return true;
        if (obj == null)    return false;
        if (getClass() != obj.getClass())   return false;
        
        final Zone other = (Zone) obj;
        if (Objects.equals(this.id, other.getId()) && Objects.equals(this.coveredItineraries, other.coveredItineraries) 
                && (this.name == null ? other.getName() == null : this.name.equals(other.getName())) 
                && Objects.equals(this.extension, other.getExtension())) {
            
            for(Itinerary i: coveredItineraries){
                if (!(other.getCoveredItineraries().contains(i))) return false;
            }
                    
            return true;
        }
        return true;
    }
}
